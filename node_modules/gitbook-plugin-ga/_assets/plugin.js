(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.GitBookPlugin = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var GitBook = require('gitbook-core');
var React = GitBook.React;

/**
 * Ga wrapper to track page view.
 * @type {ReactClass}
 */

var GAWrapper = React.createClass({
    displayName: 'GAWrapper',

    propTypes: {
        children: React.PropTypes.node,
        config: GitBook.PropTypes.map.isRequired,
        location: GitBook.PropTypes.Location.isRequired
    },

    componentDidMount: function componentDidMount() {
        var config = this.props.config;

        // Load ga

        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r;i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments);
            }, i[r].l = 1 * new Date();a = s.createElement(o), m = s.getElementsByTagName(o)[0];a.async = 1;a.src = g;m.parentNode.insertBefore(a, m);
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

        // Initialize ga
        ga('create', config.get('token'), config.get('configuration'));
    },
    componentDidUpdate: function componentDidUpdate(prevProps) {
        var prevLocation = prevProps.location;
        var location = this.props.location;

        // We do not track hash change

        var hasChanged = !prevLocation.delete('hash').equals(location.delete('hash'));

        if (hasChanged) {
            ga('send', 'pageview', location.toString());
        }
    },
    render: function render() {
        var children = this.props.children;

        return children ? React.Children.only(children) : null;
    }
});
GAWrapper = GitBook.connect(GAWrapper, function (_ref) {
    var history = _ref.history,
        config = _ref.config;
    return {
        location: history.location,
        config: config.getForPlugin('ga')
    };
});

module.exports = GitBook.createPlugin({
    activate: function activate(dispatch, getState, _ref2) {
        var Components = _ref2.Components;

        dispatch(Components.registerComponent(GAWrapper, { role: 'website:body' }));
    }
});

},{"gitbook-core":"gitbook-core"}]},{},[1])(1)
});